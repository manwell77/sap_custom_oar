<?xml version="1.0" encoding="utf-8"?>
<nugget name="CUSAOR">
 <PROG NAME="ZRESPAREAWITHEVCNTX" VARCL="X" SUBC="1" RMAND="099" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Responsible Area Demo With Evaluation Context" LENGTH="45 "/>
    <textElement ID="S" KEY="P_F1" ENTRY="        Agent 1" LENGTH="15 "/>
    <textElement ID="S" KEY="P_F2" ENTRY="        Agent 2" LENGTH="15 "/>
    <textElement ID="S" KEY="P_F3" ENTRY="        Agent 3" LENGTH="15 "/>
   </language>
   <language SPRAS="I">
    <textElement ID="R" ENTRY="Demo Responsible Area con Evaluation Context" LENGTH="70 "/>
    <textElement ID="S" KEY="P_COM" ENTRY="        Commit?" LENGTH="15 "/>
    <textElement ID="S" KEY="P_F1" ENTRY="        Agente 1" LENGTH="16 "/>
    <textElement ID="S" KEY="P_F2" ENTRY="        Agente 2" LENGTH="16 "/>
    <textElement ID="S" KEY="P_F3" ENTRY="        Agente 3" LENGTH="16 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZRESPAREAWITHEVCNTX
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

report zrespareawithevcntx.

data: lt_approver type /sapsrm/t_wf_approver,
      ls_approver type /sapsrm/s_wf_approver,
      lo_areac    type ref to zcl_wf_area_demo, &quot;area created
      lo_areal    type ref to zcl_wf_area_demo, &quot;area loaded
      lo_context  type ref to zirevacontext.

parameters: p_f1  type fieldname obligatory,
            p_f2  type fieldname obligatory,
            p_f3  type fieldname obligatory.

start-of-selection.

  create data lo_context.

* set context values
  lo_context-&gt;mandt  = sy-mandt.
  lo_context-&gt;field1 = p_f1.
  lo_context-&gt;field2 = p_f2.
  lo_context-&gt;field3 = p_f3.

* build responsible area
* must be done in method /SAPSRM/IF_EX_WF_RESP_RESOLVER~GET_AREA_TO_ITEM_MAP of your responsible resolver
  lo_areac ?= zcl_wf_area_demo=&gt;/sapsrm/if_wf_area~create_instance( iv_area_type = zcl_wf_area_demo=&gt;gc_area_type iv_leading_object_id = &apos;LEAD&apos; ir_evaluation_context = lo_context ).

* retrieve instance &amp; ask for approvers
* must be done in method /SAPSRM/IF_EX_WF_RESP_RESOLVER~GET_APPROVERS_BY_AREA_GUID of your responsible resolver
  lo_areal ?= zcl_wf_area_demo=&gt;/sapsrm/if_wf_area~get_instance_by_guid( iv_area_type = zcl_wf_area_demo=&gt;gc_area_type iv_area_guid = lo_areac-&gt;/sapsrm/if_wf_area~get_guid( ) ).
  lt_approver = lo_areal-&gt;/sapsrm/if_wf_area~get_responsible_approvers( ).

  loop at lt_approver into ls_approver.
    write: / ls_approver-approver_ot, ls_approver-approver_id.
  endloop.</source>
 </PROG>
 <TABL TABNAME="ZIREVACONTEXT" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Evaluation Context" AUTHCLASS="00" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIREVACONTEXT" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIREVACONTEXT" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIREVACONTEXT" FIELDNAME="ID" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="SYSUUID_X16" ADMINFIELD="0" INTTYPE="X" INTLEN="000016" NOTNULL="X" DOMNAME="SYSUUID_X16" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="D" DATATYPE="RAW" LENG="000016" OUTPUTLEN="000032" DECIMALS="000000" MASK="  RAW E" MASKLEN="0000" DDTEXT="16 Byte UUID in 16 Bytes (Raw Format)" REPTEXT="UUID" SCRTEXT_S="UUID" SCRTEXT_M="UUID" SCRTEXT_L="UUID" DOMNAME3L="SYSUUID_X16" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIREVACONTEXT" FIELDNAME="FIELD1" DDLANGUAGE="E" POSITION="0003" ROLLNAME="FIELDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" MEMORYID="DFD" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Field Name" REPTEXT="Field Name" SCRTEXT_S="Field" SCRTEXT_M="Field Name" SCRTEXT_L="Field Name" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIREVACONTEXT" FIELDNAME="FIELD2" DDLANGUAGE="E" POSITION="0004" ROLLNAME="FIELDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" MEMORYID="DFD" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Field Name" REPTEXT="Field Name" SCRTEXT_S="Field" SCRTEXT_M="Field Name" SCRTEXT_L="Field Name" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIREVACONTEXT" FIELDNAME="FIELD3" DDLANGUAGE="E" POSITION="0005" ROLLNAME="FIELDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" MEMORYID="DFD" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Field Name" REPTEXT="Field Name" SCRTEXT_S="Field" SCRTEXT_M="Field Name" SCRTEXT_L="Field Name" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <CLAS CLSNAME="ZCL_WF_AREA_DEMO" VERSION="1" LANGU="E" DESCRIPT="Responsible Area Demo" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_WF_AREA_DEMO" REFCLSNAME="/SAPSRM/IF_WF_AREA" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="GC_AREA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;ZCL_WF_AREA_DEMO&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SWF_CLSNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="IR_EVALUATION_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Evaluation Context" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIREVACONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="MT_AREA_ENTITY_ID" VERSION="1" LANGU="E" DESCRIPT="Table of Responsibility Area Identifiers" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="/SAPSRM/T_WF_AREA_ENTITY_ID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="MV_AREA_GUID" VERSION="1" LANGU="E" DESCRIPT="Responsibility Area Identifier" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="/SAPSRM/WF_AREA_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="MV_LEADING_OBJECT_ID" VERSION="1" LANGU="E" DESCRIPT="Leading Object Identifier of a Responsibility Area" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="/SAPSRM/WF_LEADING_OBJECT_ID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~CREATE_INSTANCE">
   <source>method /SAPSRM/IF_WF_AREA~CREATE_INSTANCE.

    create object ro_area type (iv_area_type).

    ro_area-&gt;initialize( iv_area_type          = iv_area_type
                         iv_leading_object_id  = iv_leading_object_id
                         ir_evaluation_context = ir_evaluation_context ).

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~GET_AREA_ENTITY_IDS">
   <source>method /SAPSRM/IF_WF_AREA~GET_AREA_ENTITY_IDS.

    rt_area_entity_id = mt_area_entity_id.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~GET_GUID">
   <source>method /SAPSRM/IF_WF_AREA~GET_GUID.

    rv_area_guid = mv_area_guid.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~GET_INSTANCE_BY_GUID">
   <source>method /SAPSRM/IF_WF_AREA~GET_INSTANCE_BY_GUID.

    create object ro_area type (iv_area_type) exporting iv_area_guid = iv_area_guid.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~GET_LEADING_OBJECT_ID">
   <source>method /SAPSRM/IF_WF_AREA~GET_LEADING_OBJECT_ID.

    rv_leading_object_id = mv_leading_object_id.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~GET_RESPONSIBLE_APPROVERS">
   <source>method /SAPSRM/IF_WF_AREA~GET_RESPONSIBLE_APPROVERS.

*   write your own agent resolution logic based on:
*   - mv_leading_object_id
*   - ir_evaluation_context

*   rt_approver = function( me-&gt;mv_leading_object_id, me-&gt;ir_evaluation_context)

    rt_approver = value #( ( approver_ot = &apos;US&apos; approver_id = me-&gt;ir_evaluation_context-field1 )
                           ( approver_ot = &apos;US&apos; approver_id = me-&gt;ir_evaluation_context-field2 )
                           ( approver_ot = &apos;US&apos; approver_id = me-&gt;ir_evaluation_context-field3 ) ).

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_WF_AREA_DEMO" CPDNAME="/SAPSRM/IF_WF_AREA~INITIALIZE">
   <source>method /SAPSRM/IF_WF_AREA~INITIALIZE.

    data lv_area_guid         type /sapsrm/wf_area_guid.
    data lv_area_entity_id    type /sapsrm/wf_area_entity_id.
    data lv_leading_object_id type char32.

    lv_area_guid          = /sapsrm/cl_wf_guid_control=&gt;create_guid( ).
    lv_area_entity_id     = iv_leading_object_id.
    lv_leading_object_id  = iv_leading_object_id.

    clear mt_area_entity_id.
    refresh mt_area_entity_id.

*   with each save, the area entity id is appended to mt_area_entity_id
    me-&gt;save( iv_area_guid          = lv_area_guid
              iv_area_entity_id     = lv_area_entity_id
              iv_leading_object_id  = lv_leading_object_id
              ir_evaluation_context = ir_evaluation_context ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Object Builder" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="CONSTRUCTOR" SCONAME="IV_AREA_GUID" VERSION="1" LANGU="E" DESCRIPT="Responsibility Area Identifier" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="/SAPSRM/WF_AREA_GUID" PAROPTIONL="X"/>
   <source>method CONSTRUCTOR.

    data lv_oid type os_guid.

    if iv_area_guid is supplied and iv_area_guid is not initial.
      lv_oid = iv_area_guid.
      me-&gt;load( lv_oid ). &quot; query -&gt; retrieves all three attribute values
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="LOAD" VERSION="1" LANGU="E" DESCRIPT="Loads the stored information from the database" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="LOAD" SCONAME="IV_AREA_GUID" VERSION="1" LANGU="E" DESCRIPT="Responsibility Area Identifier" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="/SAPSRM/WF_AREA_GUID"/>
   <source>method LOAD.

    data: lo_query_manager      type ref to if_os_query_manager,
          lo_query              type ref to if_os_query,
          lt_area_entity_ref    type osreftab,
          lt_area_entity_query  type osreftab,
          lo_area_entity_ref    like line of lt_area_entity_ref,
          lo_area_entity        type ref to /sapsrm/if_wf_area_entity,
          lv_area_entity_id     type /sapsrm/wf_area_entity_id.

    log-point id /sapsrm/wf_core subkey &apos;/SAPSRM/CL_WF_AREA-&gt;LOAD&apos; fields iv_area_guid.

    try.
*       get the newly created objects form the object service and filter those
        lt_area_entity_ref = /sapsrm/ca_wf_area_base=&gt;agent-&gt;if_os_ca_instance~get_created( ).

        loop at lt_area_entity_ref into lo_area_entity_ref.
          lo_area_entity ?= lo_area_entity_ref.
          if lo_area_entity-&gt;get_area_guid( ) ne iv_area_guid.
            delete lt_area_entity_ref index sy-tabix.
          endif.
        endloop.

*       get the persistent objects by query and append them to list
        lo_query_manager = cl_os_system=&gt;get_query_manager( ).
        lo_query = lo_query_manager-&gt;create_query( i_filter  = `MV_AREA_GUID = PAR1` ).

        lt_area_entity_query = /sapsrm/ca_wf_area_base=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
          i_query         = lo_query
          i_par1          = iv_area_guid ).

        append lines of lt_area_entity_query to lt_area_entity_ref.

    endtry.

*   assign values to local attributes (AREA_GUID, LEADING_OBJECT_ID, AREA_ENTITY_ID (Table))
    mv_area_guid = iv_area_guid.

    loop at lt_area_entity_ref into lo_area_entity_ref.
      lo_area_entity ?= lo_area_entity_ref.
      at new table_line.
        mv_leading_object_id = lo_area_entity-&gt;get_leading_object_id( ).
      endat.
      lv_area_entity_id = lo_area_entity-&gt;get_area_entity_id( ).
      append lv_area_entity_id to mt_area_entity_id.
    endloop.

    me-&gt;load_evaluation_context( ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="LOAD_EVALUATION_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Loads the stored information from the database" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_EVALUATION_CONTEXT.

    data: lo_query_manager      type ref to if_os_query_manager,
          lo_query              type ref to if_os_query,
          lt_area_entity_ref    type osreftab,
          lt_area_entity_query  type osreftab,
          lo_area_entity_ref    like line of lt_area_entity_ref,
          lo_area_entity        type ref to /sapsrm/if_wf_area_entity,
          lv_area_entity_id     type /sapsrm/wf_area_entity_id,
          lo_ps_context         type ref to zcl_ps_eval_context.

*   load evaluation context data from db-persistence layer
*   -&gt; simply an adjustment of standard load code for our evealuation context

*   get the newly created objects form the object service and filter those
    lt_area_entity_ref = zca_ps_eval_context=&gt;agent-&gt;if_os_ca_instance~get_created( ).

    loop at lt_area_entity_ref into lo_area_entity_ref.
      cast zcl_ps_eval_context( lo_area_entity_ref ).
      lo_ps_context = cast #( lo_area_entity_ref ).
      if lo_ps_context-&gt;get_id( ) ne me-&gt;/sapsrm/if_wf_area~get_guid( ).
        delete lt_area_entity_ref index sy-tabix.
      endif.
    endloop.

*   get the persistent objects by query and append them to list
    lo_query_manager = cl_os_system=&gt;get_query_manager( ).
    lo_query = lo_query_manager-&gt;create_query( i_filter  = `ID = PAR1` ).

    lt_area_entity_query = zca_ps_eval_context=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
      i_query         = lo_query
      i_par1          = me-&gt;/sapsrm/if_wf_area~get_guid( ) ).

    append lines of lt_area_entity_query to lt_area_entity_ref.

*   assign values to local attributes (IR_EVALUATION_CONTEXT)
    loop at lt_area_entity_ref into lo_area_entity_ref.
*     cast object
      cast zcl_ps_eval_context( lo_area_entity_ref ).
      lo_ps_context = cast #( lo_area_entity_ref ).
*     prepare lines
      me-&gt;ir_evaluation_context-mandt  = sy-mandt.
      me-&gt;ir_evaluation_context-id     = lo_ps_context-&gt;get_id( ).
      me-&gt;ir_evaluation_context-field1 = lo_ps_context-&gt;get_field1( ).
      me-&gt;ir_evaluation_context-field2 = lo_ps_context-&gt;get_field2( ).
      me-&gt;ir_evaluation_context-field3 = lo_ps_context-&gt;get_field3( ).
    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE" VERSION="1" LANGU="E" DESCRIPT="Stores the given data to the database" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE" SCONAME="IV_AREA_GUID" VERSION="1" LANGU="E" DESCRIPT="Responsibility Area Identifier" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="/SAPSRM/WF_AREA_GUID"/>
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE" SCONAME="IV_AREA_ENTITY_ID" VERSION="1" LANGU="E" DESCRIPT="Responsibility Area Entity Identifier" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="/SAPSRM/WF_AREA_ENTITY_ID"/>
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE" SCONAME="IV_LEADING_OBJECT_ID" VERSION="1" LANGU="E" DESCRIPT="Character field, length 32" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR32" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE" SCONAME="IR_EVALUATION_CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <source>method SAVE.

*   initialize member
    mv_area_guid          = iv_area_guid.
    mv_leading_object_id  = iv_leading_object_id.

    append iv_area_entity_id to mt_area_entity_id.

    /sapsrm/ca_wf_area_base=&gt;agent-&gt;create_persistent(
      i_mv_area_guid         = iv_area_guid
      i_mv_area_entity_id    = iv_area_entity_id
      i_mv_leading_object_id = iv_leading_object_id ).

    me-&gt;save_evaluation_context( ir_evaluation_context = ir_evaluation_context ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE_EVALUATION_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Stores the given data to the database" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WF_AREA_DEMO" CMPNAME="SAVE_EVALUATION_CONTEXT" SCONAME="IR_EVALUATION_CONTEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <source>method SAVE_EVALUATION_CONTEXT.

    data: lo_context type ref to zcl_ps_eval_context.

    field-symbols: &lt;ls_context&gt; type zirevacontext.

*   evaluation context management
    if ir_evaluation_context is bound.
*     cast it in your structure
      assign ir_evaluation_context-&gt;* to &lt;ls_context&gt;.
*     store attribute using db persistence layer
      lo_context = zca_ps_eval_context=&gt;agent-&gt;create_persistent( me-&gt;/sapsrm/if_wf_area~get_guid( ) ).
      lo_context-&gt;set_field1( &lt;ls_context&gt;-field1 ).
      lo_context-&gt;set_field2( &lt;ls_context&gt;-field2 ).
      lo_context-&gt;set_field3( &lt;ls_context&gt;-field3 ).
*     initialize attribute
      &lt;ls_context&gt;-mandt = sy-mandt.
      &lt;ls_context&gt;-id = me-&gt;/sapsrm/if_wf_area~get_guid( ).
      me-&gt;ir_evaluation_context = &lt;ls_context&gt;.
    endif.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_PS_EVAL_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Evaluation Context DB Persistent" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <friends CLSNAME="ZCL_PS_EVAL_CONTEXT" REFCLSNAME="ZCB_PS_EVAL_CONTEXT" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_PS_EVAL_CONTEXT" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_PS_EVAL_CONTEXT" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="FIELD1" VERSION="1" LANGU="E" DESCRIPT="Field Name" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="FIELDNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="FIELD2" VERSION="1" LANGU="E" DESCRIPT="Field Name" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="FIELDNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="FIELD3" VERSION="1" LANGU="E" DESCRIPT="Field Name" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="FIELDNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="ID" VERSION="1" LANGU="E" DESCRIPT="16 Byte UUID in 16 Bytes (Raw Format)" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="SYSUUID_X16" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_PS_EVAL_CONTEXT" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_PS_EVAL_CONTEXT" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_PS_EVAL_CONTEXT" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_PS_EVAL_CONTEXT" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_PS_EVAL_CONTEXT" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD1" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute FIELD1" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD1" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD1" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_FIELD1.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute FIELD1
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = FIELD1.

           &quot; GET_FIELD1
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD2" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute FIELD2" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD2" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD2" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_FIELD2.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute FIELD2
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = FIELD2.

           &quot; GET_FIELD2
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD3" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute FIELD3" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD3" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_FIELD3" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_FIELD3.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute FIELD3
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = FIELD3.

           &quot; GET_FIELD3
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_ID" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ID" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_ID" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="GET_ID" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ID.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ID
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ID.

           &quot; GET_ID
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD1" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute FIELD1" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD1" SCONAME="I_FIELD1" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD1" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_FIELD1.
***BUILD 090501
     &quot; importing I_FIELD1
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute FIELD1
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_FIELD1 &lt;&gt; FIELD1 ).

    FIELD1 = I_FIELD1.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_FIELD1 &lt;&gt; FIELD1 )

           &quot; GET_FIELD1
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD2" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute FIELD2" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD2" SCONAME="I_FIELD2" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD2" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_FIELD2.
***BUILD 090501
     &quot; importing I_FIELD2
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute FIELD2
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_FIELD2 &lt;&gt; FIELD2 ).

    FIELD2 = I_FIELD2.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_FIELD2 &lt;&gt; FIELD2 )

           &quot; GET_FIELD2
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD3" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute FIELD3" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD3" SCONAME="I_FIELD3" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME"/>
   <exception CLSNAME="ZCL_PS_EVAL_CONTEXT" CMPNAME="SET_FIELD3" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_FIELD3.
***BUILD 090501
     &quot; importing I_FIELD3
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute FIELD3
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_FIELD3 &lt;&gt; FIELD3 ).

    FIELD3 = I_FIELD3.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_FIELD3 &lt;&gt; FIELD3 )

           &quot; GET_FIELD3
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_PS_EVAL_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Base agent Evaluation Context DB Persistent" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_PS_EVAL_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="26 " TYPESRC_LENG="87 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      ID type SYSUUID_X16 ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="49 " TYPESRC_LENG="97 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="21 " TYPESRC_LENG="170 " TYPESRC="begin of TYP_DB_DATA ,
      FIELD1 type FIELDNAME ,
      FIELD2 type FIELDNAME ,
      FIELD3 type FIELDNAME ,
      ID type SYSUUID_X16 ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="44 " TYPESRC_LENG="87 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="40 " TYPESRC_LENG="79 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="27 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="47 " TYPESRC_LENG="93 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="34 " SRCCOLUMN2="33 " TYPESRC_LENG="195 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="36 " SRCCOLUMN1="4 " SRCROW2="38 " SRCCOLUMN2="14 " TYPESRC_LENG="114 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="40 " SRCCOLUMN1="4 " SRCROW2="42 " SRCCOLUMN2="17 " TYPESRC_LENG="110 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="44 " SRCCOLUMN1="4 " SRCROW2="45 " SRCCOLUMN2="56 " TYPESRC_LENG="101 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_ATT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Query: Mapping Metadata for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="OSTYP_RT_MAP_ATT_INFO_SRT_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_PS_EVAL_CONTEXT" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_ID = BUSINESS_KEY-ID
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY.
***BUILD 093901
     &quot; importing I_QUERY type ref to IF_OS_QUERY
     &quot;           I_PARAMETER_TAB type OSTYP_DREF_TAB optional
     &quot;           I_PAR1 type ANY optional
     &quot;           I_PAR2 type ANY optional
     &quot;           I_PAR3 type ANY optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I default 0
     &quot;           I_OPTIONS type IF_OS_QUERY_OPTIONS default
     &quot;             IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
     &quot; returning value(RESULT) type OSREFTAB
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
     &quot;           CX_OS_QUERY_ERROR
************************************************************************
* Purpose        : Get persistent objects by Query
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : For each instance that satifies the filter
*                  expression, there is a corresponding entry in the
*                  RESULT table. The persistent objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (DELETED_BY_BKEY,TRANSIENT_BY_BKEY)
*                  propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Load data by query
*                  2. Set objects from data
*                  2a. Object found: Check PM_STATUS
*                  2b. Object not found, replace
*                  2c. Set attributes
*                  2d. Completion in super class
*                  3. clean up
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial version
************************************************************************

  data: FLAG_NOT_LOADED  type OS_BOOLEAN,
        BKEY_STRING      type STRING,
        TEMP_OBJECT_REF  type TYP_OBJECT_REF,
        BUSINESS_KEY     type TYP_BUSINESS_KEY,
        OBJECT_DATA_TAB  type TYP_DB_DATA_TAB,
        QUERY            type ref to IF_OS_QRY_SERVICE,
        WHERE_CLAUSE     type STRING,
        ORDER_BY_CLAUSE  type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA.

* * 1. Load data with query

  try.
      call method MAP_INITIALIZE_METADATA.

      QUERY ?= I_QUERY.

      call method QUERY-&gt;MAP
           exporting I_CLASS_AGENT = ME
                     I_MAP_ATT_TAB = MAP_ATT_INFO_TAB.

      call method QUERY-&gt;GET_ORDER_BY_CLAUSE
           receiving RESULT = ORDER_BY_CLAUSE.

      if ( I_PARAMETER_TAB is supplied ).

        if ( ( I_PAR1 is supplied ) or
             ( I_PAR2 is supplied ) or
             ( I_PAR3 is supplied ) ).

          raise exception type CX_OS_QUERY_PARAMETER_ERROR
            exporting TEXTID = CX_OS_QUERY_PARAMETER_ERROR=&gt;CALL_ERROR.

        endif.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             exporting I_PARAMETER_TAB = I_PARAMETER_TAB
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
             receiving result = OBJECT_DATA_TAB.

      else.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
                       PAR1              = I_PAR1
                       PAR2              = I_PAR2
                       PAR3              = I_PAR3
             receiving result = OBJECT_DATA_TAB.

      endif.
    catch CX_OS_DB_SELECT.
      clear OBJECT_DATA_TAB.
  endtry.

* * 2. Set objects from data

  try.

*     * internal Undo
      append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
      INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

      loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

        call method MAP_EXTRACT_IDENTIFIER
             exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
             importing E_BUSINESS_KEY = BUSINESS_KEY.

        clear CURRENT_OBJECT_IREF.

        read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
           with table key BUSINESS_KEY = BUSINESS_KEY.

        if ( SY-SUBRC = 0 ).

          read table SPECIAL_OBJECT_INFO
               into CURRENT_SPECIAL_OBJECT_INFO
               with table key
               OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
          call method OS_LOAD_AND_VALIDATE_CURRENT
               exporting I_INDEX = SY-TABIX.

        endif.

        if ( not CURRENT_OBJECT_IREF is initial ).

*       * 2a. Object found: Check PM_STATUS

          case CURRENT_OBJECT_INFO-PM_STATUS.

*         * 2a1. If Status is DELETED, ignore or raise exception!
          when OSCON_OSTATUS_DELETED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;IGNORE_DELETED ).

              call method OS_CLEAR_CURRENT.
              continue.

            endif.

* !!!!!!!! Error: Object activation failed - Object marked for deletion
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

*         * 2a2. If Status is TRANSIENT, error!
          when OSCON_OSTATUS_TRANSIENT.

* !!!!!!!!!! Error: Object activation failed - Object is transient
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*         * 2a3. If Status is CHANGED, don&apos;t replace or raise exception!
          when OSCON_OSTATUS_CHANGED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;REJECT_CHANGED ).

* !!!!!!!! Error: Object activation failed - Object marked as changed
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;CHANGED_BY_BKEY.

            endif.

            FLAG_NOT_LOADED = OSCON_FALSE.

*         * 2a4. If Status is NOT_LOADED, replace
          when OSCON_OSTATUS_NOT_LOADED.

            FLAG_NOT_LOADED = OSCON_TRUE.

*         * 2a5. If Status is NEW or LOADED, don&apos;t replace
          when others.

            FLAG_NOT_LOADED = OSCON_FALSE.

          endcase.

        else.&quot; ( CURRENT_OBJECT_IREF is initial )

*       * 2b. Object not found, replace

          FLAG_NOT_LOADED = OSCON_TRUE.

        endif.

        TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

        if ( FLAG_NOT_LOADED = OSCON_TRUE ).

*         * 2c. Set attributes
          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

*         * 2d. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

        endif.

        append TEMP_OBJECT_REF to RESULT.

        call method OS_CLEAR_CURRENT.

      endloop.

*     * Clean-up internal Undo
      delete INTERNAL_TRANSACTION_STACK
             index INTERNAL_CURRENT_TRANSACTION.
      add -1 to INTERNAL_CURRENT_TRANSACTION.
      if ( INTERNAL_TRANSACTION_STACK is initial ).
        clear INTERNAL_UNDO_INFO.
        INTERNAL_NEXT_UNDO_INFO = 1.
      endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

    cleanup.
      call method OS_INTERNAL_UNDO.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
  endtry.

* * 3. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_ID = BUSINESS_KEY-ID
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_PS_EVAL_CONTEXT" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_ID = BUSINESS_KEY-ID
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="I_FIELD1" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="I_FIELD2" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="I_FIELD3" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PS_EVAL_CONTEXT"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_ID TYPE SYSUUID_X16
*      IMPORTING I_FIELD1 TYPE FIELDNAME
*      IMPORTING I_FIELD2 TYPE FIELDNAME
*      IMPORTING I_FIELD3 TYPE FIELDNAME
*      RETURNING RESULT TYPE REF TO ZCL_PS_EVAL_CONTEXT
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-ID = I_ID.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;ID = I_ID.
          THE_OBJECT-&gt;FIELD1 = I_FIELD1.
          THE_OBJECT-&gt;FIELD2 = I_FIELD2.
          THE_OBJECT-&gt;FIELD3 = I_FIELD3.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
    THE_OBJECT-&gt;FIELD1 = I_FIELD1.
    THE_OBJECT-&gt;FIELD2 = I_FIELD2.
    THE_OBJECT-&gt;FIELD3 = I_FIELD3.
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="I_FIELD1" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="I_FIELD2" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="I_FIELD3" VERSION="1" LANGU="E" DESCRIPT="Persistent Attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PS_EVAL_CONTEXT"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_ID TYPE SYSUUID_X16
*      IMPORTING I_FIELD1 TYPE FIELDNAME
*      IMPORTING I_FIELD2 TYPE FIELDNAME
*      IMPORTING I_FIELD3 TYPE FIELDNAME
*      RETURNING RESULT TYPE REF TO ZCL_PS_EVAL_CONTEXT
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-ID = I_ID.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;ID = I_ID.
          THE_OBJECT-&gt;FIELD1 = I_FIELD1.
          THE_OBJECT-&gt;FIELD2 = I_FIELD2.
          THE_OBJECT-&gt;FIELD3 = I_FIELD3.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
    THE_OBJECT-&gt;FIELD1 = I_FIELD1.
    THE_OBJECT-&gt;FIELD2 = I_FIELD2.
    THE_OBJECT-&gt;FIELD3 = I_FIELD3.
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="DELETE_PERSISTENT" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_ID TYPE SYSUUID_X16.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-ID = I_ID.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_PERSISTENT" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PS_EVAL_CONTEXT"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_ID TYPE SYSUUID_X16.
*      returning RESULT TYPE REF TO ZCL_PS_EVAL_CONTEXT
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-ID = I_ID.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_TRANSIENT" SCONAME="I_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUUID_X16"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_PS_EVAL_CONTEXT"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_ID TYPE SYSUUID_X16.
*      RETURNING RESULT TYPE REF TO ZCL_PS_EVAL_CONTEXT
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-ID = I_ID.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-ID  = I_DB_DATA-ID.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_PS_EVAL_CONTEXT,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-FIELD1 = THE_OBJECT-&gt;FIELD1.
    OBJECT_DATA_ITEM-FIELD2 = THE_OBJECT-&gt;FIELD2.
    OBJECT_DATA_ITEM-FIELD3 = THE_OBJECT-&gt;FIELD3.
    OBJECT_DATA_ITEM-ID = THE_OBJECT-&gt;ID.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_INITIALIZE_METADATA" VERSION="1" LANGU="E" DESCRIPT="Initializes Metadata Table for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INITIALIZE_METADATA.
***BUILD 093901
************************************************************************
* Purpose        : Initialize the mapping metadata,
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The mapping metadata table MAP_ATT_INFO_TAB
*                  contains an entry for all persistent attributes
*                  accessible from a query expression
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
************************************************************************


  data: MAP_ATT_INFO type OSTYP_RT_MAP_ATT_INFO.

  if MAP_ATT_INFO_TAB is initial.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;FIELD1&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZIREVACONTEXT&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;FIELD1&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;FIELD2&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZIREVACONTEXT&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;FIELD2&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;FIELD3&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZIREVACONTEXT&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;FIELD3&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ID&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZIREVACONTEXT&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ID&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

  endif.

           &quot;MAP_INITIALIZE_METADATA
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_PS_EVAL_CONTEXT.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;FIELD1,
             THE_OBJECT-&gt;FIELD2,
             THE_OBJECT-&gt;FIELD3,
             THE_OBJECT-&gt;ID.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Reads Identified Object Data from the DB Based on a Filter" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_ORDER_BY_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="ORDER BY Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_SUBCLASSES" VERSION="1" LANGU="E" DESCRIPT="Load Subclass Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OS_BOOLEAN" PARVALUE="OSCON_FALSE"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_UPTO" VERSION="1" LANGU="E" DESCRIPT="Max. No. Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Where Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR1" VERSION="1" LANGU="E" DESCRIPT="First Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR2" VERSION="1" LANGU="E" DESCRIPT="Second Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR3" VERSION="1" LANGU="E" DESCRIPT="Third Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE.
***BUILD 093901
     &quot; importing I_WHERE_CLAUSE type STRING optional
     &quot;           I_ORDER_BY_CLAUSE type STRING optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I value 0
     &quot;           PAR1 type ANY optional
     &quot;           PAR2 type ANY optional
     &quot;           PAR3 type ANY optional
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_WHERE_CLAUSE with
*                  PAR1, PAR2 and PAR3 from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_WHERE_CLAUSE is valid where clause in Open-SQL
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZIREVACONTEXT.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZIREVACONTEXT&gt; type ZIREVACONTEXT.
*&gt;

*&lt; Generated from mapping:
  select * from ZIREVACONTEXT
           up to I_UPTO rows
           into table DB_DATA_LOCAL_TAB
           where (I_WHERE_CLAUSE)
           order by (I_ORDER_BY_CLAUSE).
*&gt;

*   * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZIREVACONTEXT&apos;
                   WHERE_CLAUSE = I_WHERE_CLAUSE
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_QUERY.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZIREVACONTEXT&gt;.

*&lt; Generated from mapping:
    DB_DATA-FIELD1 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD1.
    DB_DATA-FIELD2 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD2.
    DB_DATA-FIELD3 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD3.
    DB_DATA-ID = &lt;FS_DB_ZIREVACONTEXT&gt;-ID.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_TAB

           &quot;MAP_LOAD_FROM_DATABASE
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZIREVACONTEXT.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZIREVACONTEXT&gt; type ZIREVACONTEXT.
*&gt;

*&lt; Generated from mapping:
  select * from ZIREVACONTEXT
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZIREVACONTEXT~ID = I_BUSINESS_KEY_TAB-ID.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZIREVACONTEXT&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZIREVACONTEXT&gt;.

*&lt; Generated from mapping:
    DB_DATA-FIELD1 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD1.
    DB_DATA-FIELD2 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD2.
    DB_DATA-FIELD3 = &lt;FS_DB_ZIREVACONTEXT&gt;-FIELD3.
    DB_DATA-ID = &lt;FS_DB_ZIREVACONTEXT&gt;-ID.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-ID = BUSINESS_KEY-ID.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZIREVACONTEXT: internal tables for mass operation
  data DB_ITB_ZIREVACONTEXT type STANDARD TABLE OF ZIREVACONTEXT.
  data DB_UTB_ZIREVACONTEXT type STANDARD TABLE OF ZIREVACONTEXT.
  data DB_DTB_ZIREVACONTEXT type STANDARD TABLE OF ZIREVACONTEXT.

* * ZIREVACONTEXT: headlines for tables
  data DB_ILN_ZIREVACONTEXT type ZIREVACONTEXT.
  data DB_ULN_ZIREVACONTEXT type ZIREVACONTEXT.
  data DB_DLN_ZIREVACONTEXT type ZIREVACONTEXT.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:

   DB_ILN_ZIREVACONTEXT-FIELD1 = &lt;FS_INSERT&gt;-FIELD1.
   DB_ILN_ZIREVACONTEXT-FIELD2 = &lt;FS_INSERT&gt;-FIELD2.
   DB_ILN_ZIREVACONTEXT-FIELD3 = &lt;FS_INSERT&gt;-FIELD3.



   DB_ILN_ZIREVACONTEXT-ID = &lt;FS_INSERT&gt;-ID.
   append DB_ILN_ZIREVACONTEXT to DB_ITB_ZIREVACONTEXT.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:

   DB_ULN_ZIREVACONTEXT-FIELD1 = &lt;FS_UPDATE&gt;-FIELD1.
   DB_ULN_ZIREVACONTEXT-FIELD2 = &lt;FS_UPDATE&gt;-FIELD2.
   DB_ULN_ZIREVACONTEXT-FIELD3 = &lt;FS_UPDATE&gt;-FIELD3.



   DB_ULN_ZIREVACONTEXT-ID = &lt;FS_UPDATE&gt;-ID.
   append DB_ULN_ZIREVACONTEXT TO DB_UTB_ZIREVACONTEXT.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZIREVACONTEXT-ID = &lt;FS_DELETE&gt;-BUSINESS_KEY-ID.

    append DB_DLN_ZIREVACONTEXT TO DB_DTB_ZIREVACONTEXT.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZIREVACONTEXT FROM TABLE DB_DTB_ZIREVACONTEXT.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZIREVACONTEXT&apos;.
  endif.

* * DB Inserts
  insert ZIREVACONTEXT FROM TABLE DB_ITB_ZIREVACONTEXT
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZIREVACONTEXT&apos;.
  endif.

* * DB Updates
  update ZIREVACONTEXT FROM TABLE DB_UTB_ZIREVACONTEXT.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZIREVACONTEXT&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Converts business key to string. Can&apos;t be done
*                  by move because of possible GUIDs (type X) in
*                  business key structure.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: TEMP_STRING type STRING.
  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-ID.
  concatenate COMP_STRING TEMP_STRING into TEMP_STRING.
*&gt;

  RESULT = TEMP_STRING.

           &quot; MAP_SERIALIZE_BKEY
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_PS_EVAL_CONTEXT,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;FIELD1 = I_OBJECT_DATA-FIELD1.
  THE_OBJECT-&gt;FIELD2 = I_OBJECT_DATA-FIELD2.
  THE_OBJECT-&gt;FIELD3 = I_OBJECT_DATA-FIELD3.
  THE_OBJECT-&gt;ID = I_OBJECT_DATA-ID.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_PS_EVAL_CONTEXT.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;ID = I_BUSINESS_KEY-ID.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_PS_EVAL_CONTEXT" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_PS_EVAL_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Agent Evaluation Context DB Persistent" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCB_PS_EVAL_CONTEXT">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_PS_EVAL_CONTEXT" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_PS_EVAL_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_PS_EVAL_CONTEXT" REFCLSNAME="ZCB_PS_EVAL_CONTEXT" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_PS_EVAL_CONTEXT" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_PS_EVAL_CONTEXT&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_PS_EVAL_CONTEXT&apos;
      I_CLASS_GUID          = &apos;00505601012F1ED498853450F0BE84EE&apos;
      I_CLASS_AGENT_GUID    = &apos;00505601012F1ED498853450F0BF04EE&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZIREVACONTEXT&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
  endmethod.</source>
  </method>
 </CLAS>
</nugget>
